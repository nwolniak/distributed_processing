# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.4
#
# <auto-generated>
#
# Generated from file `operations.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Operations
_M_Operations = Ice.openModule('Operations')
__name__ = 'Operations'

if 'NoInput' not in _M_Operations.__dict__:
    _M_Operations.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Operations::NoInput'

    _M_Operations._t_NoInput = IcePy.defineException('::Operations::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_Operations._t_NoInput

    _M_Operations.NoInput = NoInput
    del NoInput

if '_t_doubleSeq' not in _M_Operations.__dict__:
    _M_Operations._t_doubleSeq = IcePy.defineSequence('::Operations::doubleSeq', (), IcePy._t_double)

if '_t_imageData' not in _M_Operations.__dict__:
    _M_Operations._t_imageData = IcePy.defineSequence('::Operations::imageData', (), IcePy._t_byte)

if 'Statistics' not in _M_Operations.__dict__:
    _M_Operations.Statistics = Ice.createTempClass()
    class Statistics(object):
        def __init__(self, avg=0.0, median=0.0, min=0.0, max=0.0):
            self.avg = avg
            self.median = median
            self.min = min
            self.max = max

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Operations.Statistics):
                return NotImplemented
            else:
                if self.avg != other.avg:
                    return False
                if self.median != other.median:
                    return False
                if self.min != other.min:
                    return False
                if self.max != other.max:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Operations._t_Statistics)

        __repr__ = __str__

    _M_Operations._t_Statistics = IcePy.defineStruct('::Operations::Statistics', Statistics, (), (
        ('avg', (), IcePy._t_double),
        ('median', (), IcePy._t_double),
        ('min', (), IcePy._t_double),
        ('max', (), IcePy._t_double)
    ))

    _M_Operations.Statistics = Statistics
    del Statistics

if 'Author' not in _M_Operations.__dict__:
    _M_Operations.Author = Ice.createTempClass()
    class Author(object):
        def __init__(self, firstName='', secondName=''):
            self.firstName = firstName
            self.secondName = secondName

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.firstName)
            _h = 5 * _h + Ice.getHash(self.secondName)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Operations.Author):
                return NotImplemented
            else:
                if self.firstName is None or other.firstName is None:
                    if self.firstName != other.firstName:
                        return (-1 if self.firstName is None else 1)
                else:
                    if self.firstName < other.firstName:
                        return -1
                    elif self.firstName > other.firstName:
                        return 1
                if self.secondName is None or other.secondName is None:
                    if self.secondName != other.secondName:
                        return (-1 if self.secondName is None else 1)
                else:
                    if self.secondName < other.secondName:
                        return -1
                    elif self.secondName > other.secondName:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Operations._t_Author)

        __repr__ = __str__

    _M_Operations._t_Author = IcePy.defineStruct('::Operations::Author', Author, (), (
        ('firstName', (), IcePy._t_string),
        ('secondName', (), IcePy._t_string)
    ))

    _M_Operations.Author = Author
    del Author

if 'Image' not in _M_Operations.__dict__:
    _M_Operations.Image = Ice.createTempClass()
    class Image(object):
        def __init__(self, imageType='', imageData=None):
            self.imageType = imageType
            self.imageData = imageData

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.imageType)
            if self.imageData:
                for _i0 in self.imageData:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Operations.Image):
                return NotImplemented
            else:
                if self.imageType is None or other.imageType is None:
                    if self.imageType != other.imageType:
                        return (-1 if self.imageType is None else 1)
                else:
                    if self.imageType < other.imageType:
                        return -1
                    elif self.imageType > other.imageType:
                        return 1
                if self.imageData is None or other.imageData is None:
                    if self.imageData != other.imageData:
                        return (-1 if self.imageData is None else 1)
                else:
                    if self.imageData < other.imageData:
                        return -1
                    elif self.imageData > other.imageData:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Operations._t_Image)

        __repr__ = __str__

    _M_Operations._t_Image = IcePy.defineStruct('::Operations::Image', Image, (), (
        ('imageType', (), IcePy._t_string),
        ('imageData', (), _M_Operations._t_imageData)
    ))

    _M_Operations.Image = Image
    del Image

if 'Book' not in _M_Operations.__dict__:
    _M_Operations.Book = Ice.createTempClass()
    class Book(object):
        def __init__(self, bookName='', author=Ice._struct_marker, length=0, bookImage=Ice._struct_marker):
            self.bookName = bookName
            if author is Ice._struct_marker:
                self.author = _M_Operations.Author()
            else:
                self.author = author
            self.length = length
            if bookImage is Ice._struct_marker:
                self.bookImage = _M_Operations.Image()
            else:
                self.bookImage = bookImage

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.bookName)
            _h = 5 * _h + Ice.getHash(self.author)
            _h = 5 * _h + Ice.getHash(self.length)
            _h = 5 * _h + Ice.getHash(self.bookImage)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Operations.Book):
                return NotImplemented
            else:
                if self.bookName is None or other.bookName is None:
                    if self.bookName != other.bookName:
                        return (-1 if self.bookName is None else 1)
                else:
                    if self.bookName < other.bookName:
                        return -1
                    elif self.bookName > other.bookName:
                        return 1
                if self.author is None or other.author is None:
                    if self.author != other.author:
                        return (-1 if self.author is None else 1)
                else:
                    if self.author < other.author:
                        return -1
                    elif self.author > other.author:
                        return 1
                if self.length is None or other.length is None:
                    if self.length != other.length:
                        return (-1 if self.length is None else 1)
                else:
                    if self.length < other.length:
                        return -1
                    elif self.length > other.length:
                        return 1
                if self.bookImage is None or other.bookImage is None:
                    if self.bookImage != other.bookImage:
                        return (-1 if self.bookImage is None else 1)
                else:
                    if self.bookImage < other.bookImage:
                        return -1
                    elif self.bookImage > other.bookImage:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Operations._t_Book)

        __repr__ = __str__

    _M_Operations._t_Book = IcePy.defineStruct('::Operations::Book', Book, (), (
        ('bookName', (), IcePy._t_string),
        ('author', (), _M_Operations._t_Author),
        ('length', (), IcePy._t_long),
        ('bookImage', (), _M_Operations._t_Image)
    ))

    _M_Operations.Book = Book
    del Book

if '_t_bookSeq' not in _M_Operations.__dict__:
    _M_Operations._t_bookSeq = IcePy.defineSequence('::Operations::bookSeq', (), _M_Operations._t_Book)

if '_t_booksGroupedByAuthor' not in _M_Operations.__dict__:
    _M_Operations._t_booksGroupedByAuthor = IcePy.defineDictionary('::Operations::booksGroupedByAuthor', (), _M_Operations._t_Author, _M_Operations._t_bookSeq)

_M_Operations._t_Operator = IcePy.defineValue('::Operations::Operator', Ice.Value, -1, (), False, True, None, ())

if 'OperatorPrx' not in _M_Operations.__dict__:
    _M_Operations.OperatorPrx = Ice.createTempClass()
    class OperatorPrx(Ice.ObjectPrx):

        def calculateStatistics(self, data, context=None):
            return _M_Operations.Operator._op_calculateStatistics.invoke(self, ((data, ), context))

        def calculateStatisticsAsync(self, data, context=None):
            return _M_Operations.Operator._op_calculateStatistics.invokeAsync(self, ((data, ), context))

        def begin_calculateStatistics(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_Operations.Operator._op_calculateStatistics.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_calculateStatistics(self, _r):
            return _M_Operations.Operator._op_calculateStatistics.end(self, _r)

        def groupByAuthor(self, books, context=None):
            return _M_Operations.Operator._op_groupByAuthor.invoke(self, ((books, ), context))

        def groupByAuthorAsync(self, books, context=None):
            return _M_Operations.Operator._op_groupByAuthor.invokeAsync(self, ((books, ), context))

        def begin_groupByAuthor(self, books, _response=None, _ex=None, _sent=None, context=None):
            return _M_Operations.Operator._op_groupByAuthor.begin(self, ((books, ), _response, _ex, _sent, context))

        def end_groupByAuthor(self, _r):
            return _M_Operations.Operator._op_groupByAuthor.end(self, _r)

        def convertToGrayScale(self, image, context=None):
            return _M_Operations.Operator._op_convertToGrayScale.invoke(self, ((image, ), context))

        def convertToGrayScaleAsync(self, image, context=None):
            return _M_Operations.Operator._op_convertToGrayScale.invokeAsync(self, ((image, ), context))

        def begin_convertToGrayScale(self, image, _response=None, _ex=None, _sent=None, context=None):
            return _M_Operations.Operator._op_convertToGrayScale.begin(self, ((image, ), _response, _ex, _sent, context))

        def end_convertToGrayScale(self, _r):
            return _M_Operations.Operator._op_convertToGrayScale.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Operations.OperatorPrx.ice_checkedCast(proxy, '::Operations::Operator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Operations.OperatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Operations::Operator'
    _M_Operations._t_OperatorPrx = IcePy.defineProxy('::Operations::Operator', OperatorPrx)

    _M_Operations.OperatorPrx = OperatorPrx
    del OperatorPrx

    _M_Operations.Operator = Ice.createTempClass()
    class Operator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Operations::Operator')

        def ice_id(self, current=None):
            return '::Operations::Operator'

        @staticmethod
        def ice_staticId():
            return '::Operations::Operator'

        def calculateStatistics(self, data, current=None):
            raise NotImplementedError("servant method 'calculateStatistics' not implemented")

        def groupByAuthor(self, books, current=None):
            raise NotImplementedError("servant method 'groupByAuthor' not implemented")

        def convertToGrayScale(self, image, current=None):
            raise NotImplementedError("servant method 'convertToGrayScale' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Operations._t_OperatorDisp)

        __repr__ = __str__

    _M_Operations._t_OperatorDisp = IcePy.defineClass('::Operations::Operator', Operator, (), None, ())
    Operator._ice_type = _M_Operations._t_OperatorDisp

    Operator._op_calculateStatistics = IcePy.Operation('calculateStatistics', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_Operations._t_doubleSeq, False, 0),), (), ((), _M_Operations._t_Statistics, False, 0), ())
    Operator._op_groupByAuthor = IcePy.Operation('groupByAuthor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_Operations._t_bookSeq, False, 0),), (), ((), _M_Operations._t_booksGroupedByAuthor, False, 0), ())
    Operator._op_convertToGrayScale = IcePy.Operation('convertToGrayScale', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_Operations._t_Image, False, 0),), (), ((), _M_Operations._t_Image, False, 0), ())

    _M_Operations.Operator = Operator
    del Operator

# End of module Operations
