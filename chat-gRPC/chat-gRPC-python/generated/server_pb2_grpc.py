# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generated.server_pb2 as server__pb2


class serverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.join = channel.unary_unary(
                '/server/join',
                request_serializer=server__pb2.JoinRequest.SerializeToString,
                response_deserializer=server__pb2.ServerResponse.FromString,
                )
        self.quit = channel.unary_unary(
                '/server/quit',
                request_serializer=server__pb2.QuitRequest.SerializeToString,
                response_deserializer=server__pb2.ServerResponse.FromString,
                )
        self.sendMessage = channel.stream_stream(
                '/server/sendMessage',
                request_serializer=server__pb2.FromClientMessage.SerializeToString,
                response_deserializer=server__pb2.FromServerMessage.FromString,
                )


class serverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def quit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMessage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_serverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'join': grpc.unary_unary_rpc_method_handler(
                    servicer.join,
                    request_deserializer=server__pb2.JoinRequest.FromString,
                    response_serializer=server__pb2.ServerResponse.SerializeToString,
            ),
            'quit': grpc.unary_unary_rpc_method_handler(
                    servicer.quit,
                    request_deserializer=server__pb2.QuitRequest.FromString,
                    response_serializer=server__pb2.ServerResponse.SerializeToString,
            ),
            'sendMessage': grpc.stream_stream_rpc_method_handler(
                    servicer.sendMessage,
                    request_deserializer=server__pb2.FromClientMessage.FromString,
                    response_serializer=server__pb2.FromServerMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server/join',
            server__pb2.JoinRequest.SerializeToString,
            server__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def quit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server/quit',
            server__pb2.QuitRequest.SerializeToString,
            server__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMessage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/server/sendMessage',
            server__pb2.FromClientMessage.SerializeToString,
            server__pb2.FromServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
